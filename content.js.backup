/* -----------------------------------------------------------
   ZeroToken — content.js (branding & UI tweaks only)
   IMPORTANT: No functional logic modified
------------------------------------------------------------*/

/* 0) Inject bundle.js as <script type="module"> */
(function injectModuleOnce(){
  if (document.querySelector('script[data-zt-bundle="1"]')) return;
  const s = document.createElement("script");
  s.type = "module";
  s.dataset.ztBundle = "1";
  s.src = chrome.runtime.getURL("bundle.js");
  document.documentElement.appendChild(s);
  console.info("[ZeroToken] bundle.js injected as module");
})();

/* 1) Branding & Layout adjustments */
(function branding(){
  const btnLogoURL = chrome.runtime.getURL("assets/zerotokenlogotrans.png");
  const cornerURL  = chrome.runtime.getURL("assets/ZT black bckgrn.png");
  const marsiriusURL = chrome.runtime.getURL("assets/marsiriusjustlogo.png");

  function findPanel(){
    return document.getElementById("zt-panel") || document.querySelector(".zt-panel") || null;
  }

  function hideOldTitle(panelEl){
    if (!panelEl) return;
    const candidates = panelEl.querySelectorAll("*");
    for (const el of candidates) {
      const t = (el.textContent || "").trim();
      if (t === "ZeroToken") {
        el.style.display = "none";
        break;
      }
    }
  }

  function applyOnce(){
    const panelEl = findPanel();
    if (!panelEl || panelEl.dataset.ztBrandingApplied === "1") return false;
    panelEl.dataset.ztBrandingApplied = "1";

    const style = document.createElement("style");
    style.textContent = `
      :root{ --zt-lav:#99acff; --zt-radius:12px; }
      #zt-panel{
        background:#000000 !important;
        border:1px solid rgba(255,255,255,.08) !important;
        border-radius:16px;
        position:relative; overflow:hidden;
      }
      #zt-panel .zt-corner{
        position:absolute; left:12px; top:12px;
        height:36px; width:auto; z-index:2; pointer-events:none;
      }
      /* Progress bar now below logo */
      #zt-token-fig { margin-top: 40px !important; display:block; }

      /* Generate button centered with bigger logo + text */
      #zt-panel #zt-handoff-btn,
      #zt-panel .generate-btn,
      #zt-panel button.primary{
        background:#99acff !important; color:#0b0d12 !important;
        border:0 !important; border-radius:var(--zt-radius) !important;
        font-weight:700 !important; font-size:15px !important;
        padding:12px 14px !important;
        display:flex; align-items:center; justify-content:center; gap:12px;
        box-shadow:0 10px 28px rgba(153,172,255,.35) !important;
      }
      #zt-panel .zt-cta-icon{
        height:28px; width:auto; display:inline-block;
      }
      #zt-panel #zt-handoff-btn:hover{ transform:translateY(-1px) }

      /* Bottom hint override */
      #zt-hint {
        text-align:center; font-size:12px; opacity:.85; margin-top:8px;
        display:flex; align-items:center; justify-content:center; gap:8px;
      }
      #zt-hint img {
        height:16px; width:auto; display:inline-block;
      }
    `;
    panelEl.prepend(style);

    // Sol üst küçük köşe görseli
    const corner = document.createElement("img");
    corner.className = "zt-corner";
    corner.src = cornerURL;
    panelEl.prepend(corner);

    hideOldTitle(panelEl);

    // CTA button: logo + text
    const btn = panelEl.querySelector("#zt-handoff-btn")
             || panelEl.querySelector(".generate-btn")
             || panelEl.querySelector("button.primary");
    if (btn) {
      let label = (btn.textContent || "Generate Handoff").replace(/^\s*⚡\s*/,'').trim();
      btn.innerHTML = `<img class="zt-cta-icon" src="${btnLogoURL}" alt="" /> ${label}`;
    }

    // Replace bottom hint
    const hint = panelEl.querySelector("#zt-hint");
    if (hint) {
      hint.innerHTML = `<img src="${marsiriusURL}" alt="Marsirius Logo"/> Created & Powered by Marsirius AI Labs`;
    }

    console.info("[ZeroToken] Branding applied: logo on top, sleek button, Marsirius footer");
    return true;
  }

  if (applyOnce()) return;
  let tries = 0;
  const timer = setInterval(()=>{
    if (applyOnce() || ++tries > 40) clearInterval(timer);
  }, 250);
})();
