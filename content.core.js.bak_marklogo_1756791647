/* Core UI + Logic (ZeroToken) — Shadow DOM + robust auth + stable UI + monotonic progress */

/* ───────────────── Config ───────────────── */
const SUPABASE_URL = "https://ppvergvfxththbwtjsmu.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBwdmVyZ3ZmeHRodGhid3Rqc211Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYxODk0MjAsImV4cCI6MjA3MTc2NTQyMH0.GAgKvepBkOaPjFi9i462AGc007dWG-uefj94iw_EgoI";

/* Edge Functions */
const EDGE_START  = `${SUPABASE_URL}/functions/v1/handoff_start`;
const EDGE_STATUS = `${SUPABASE_URL}/functions/v1/handoff_status`;
const EMAIL_ENDPOINT = `${SUPABASE_URL}/functions/v1/handoff_email_proxy`;

/* Visual token limit */
const TOKEN_LIMIT = 200000;

/* ───────────────── Supabase Client ───────────────── */
let supabase = null;

/* bundle.js content-script dünyasında yüklü; burada bağla */
function ensureSupabase(){
  try{
    if (!supabase && typeof window.createSupabaseClient === "function") {
      supabase = window.createSupabaseClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      window.__zt_supabase = supabase; // debug için görünür
      console.info("[ZeroToken] Supabase client attached ✓");
    }
  }catch(e){
    console.error("[ZeroToken] ensureSupabase error:", e);
  }
}
ensureSupabase();

/* ───────────────── Session / Profiles ───────────────── */
let currentUser = null;
let userProfile = null;

async function refreshSessionAndProfile() {
  ensureSupabase();
  if (!supabase) { console.warn("[ZT] Supabase client missing"); return; }
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error) { console.warn("[ZT] getUser error:", error.message); currentUser=null; userProfile=null; return; }
    currentUser = user || null;

    if (currentUser) {
      const { data } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", currentUser.id)
        .single();
      userProfile = data || null;
    } else {
      userProfile = null;
    }
  } catch (e) {
    console.error("[ZT] refreshSessionAndProfile failed:", e);
    currentUser = null; userProfile = null;
  }
}

/* ───────────────── Shadow host + watchdog ───────────────── */
let ztHost = null;       // shadow host (div#zt-host)
let ztShadow = null;     // shadowRoot
let ztObs = null;        // mutation observer

function ensureHost() {
  if (ztHost && document.documentElement.contains(ztHost)) return ztHost;

  ztHost = document.getElementById('zt-host');
  if (!ztHost) {
    ztHost = document.createElement('div');
    ztHost.id = 'zt-host';
    ztHost.style.position = 'fixed';
    ztHost.style.right = '18px';
    ztHost.style.bottom = '18px';
    ztHost.style.zIndex = '2147483647';
    ztHost.style.pointerEvents = 'none'; // içeride açacağız
    document.documentElement.appendChild(ztHost);
  }
  if (!ztHost.shadowRoot) {
    ztShadow = ztHost.attachShadow({ mode: 'open' });
    const wrap = document.createElement('div');
    wrap.id = 'zt-wrap';
    wrap.style.pointerEvents = 'auto';
    ztShadow.appendChild(wrap);
    const base = document.createElement('style');
    base.textContent = `
      :host{ all: initial; }
      #zt-wrap{ all: initial; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }
    `;
    ztShadow.appendChild(base);
  } else {
    ztShadow = ztHost.shadowRoot;
  }
  if (!ztObs) {
    ztObs = new MutationObserver(() => {
      if (!document.documentElement.contains(ztHost)) {
        ztHost = null; ztShadow = null;
        ensureHost();
        uiMounted = false;
        renderOnce();
      }
    });
    ztObs.observe(document.documentElement, { childList: true, subtree: true });
  }
  return ztHost;
}

function mountIntoShadow(node) {
  ensureHost();
  const wrap = ztShadow.getElementById('zt-wrap');
  wrap.innerHTML = '';
  wrap.appendChild(node);
}

// Shadow içine assets/theme.css'i <link rel="stylesheet"> ile yükle
function injectThemeCss(retry = 0) {
  try {
    ensureHost();
    if (!ztShadow) return;
    if (ztShadow.getElementById('zt-theme-css')) return; // zaten yüklü

    const href = chrome.runtime.getURL("assets/theme.css"); // sadece URL oluşturuyor
    const link = document.createElement('link');
    link.id = 'zt-theme-css';
    link.rel = 'stylesheet';
    link.href = href;
    ztShadow.appendChild(link);
    console.info("[ZeroToken] theme.css linked into Shadow ✓");
  } catch (e) {
    console.warn("[ZeroToken] theme.css inject failed:", e);
    // Uzantı reload'dan sonra kısa süre invalid olabilir: 1 sn sonra bir kez daha dene
    if (retry < 3) setTimeout(() => injectThemeCss(retry + 1), 1000);
  }
}


function ensurePanelVisible() {
  try {
    ensureHost();
    injectThemeCss(); // shadow yeniden oluştuysa temayı tekrar yükle
    const wrap = ztShadow?.getElementById('zt-wrap');
    let p = wrap?.querySelector('#zt-panel');

    if (!p) {
      uiMounted = false;
      renderOnce();
      p = wrap?.querySelector('#zt-panel');
    }
    if (p) {
      const cs = getComputedStyle(p);
      if (cs.display === 'none' || cs.visibility === 'hidden' || Number(cs.opacity) < 0.1) {
        p.style.display = 'block';
        p.style.visibility = 'visible';
        p.style.opacity = '1';
      }
      p.style.zIndex = '2147483647';
      p.style.pointerEvents = 'auto';
    }
  } catch (e) {
    console.warn('[ZT] ensurePanelVisible error:', e);
  }
}

/* ───────────────── Local counters ───────────────── */
function getThreadId(){ return (location.pathname||location.href||"global").replace(/\W+/g,"_"); }
function readLocalCounters(){ try{ return JSON.parse(localStorage.getItem("zt_counters")||"{}"); }catch{ return {}; } }
function writeLocalCounters(c){ try{ localStorage.setItem("zt_counters", JSON.stringify(c)); }catch{} }
function getLocalCount(kind){ const id=getThreadId(); const c=readLocalCounters(); return (c[id]?.[kind])||0; }
function bumpLocalCount(kind){ const id=getThreadId(); const c=readLocalCounters(); c[id]=c[id]||{cp:0,ho:0}; c[id][kind]++; writeLocalCounters(c); }

/* ───────────────── Token estimate ───────────────── */
let approxTokens=0, lastSavedTokens=0;
function estimateTokensFromText(s){
  try{
    if (window.TikTokenEncode) return window.TikTokenEncode(s).length;
    if (window.encode)       return window.encode(s).length;
  }catch{}
  return Math.ceil((s||"").length/4);
}

/* ───────────────── UI helpers ───────────────── */
let uiMounted=false, uiBusy=false;
function pctColor(p){ if(p<=40) return "#25c277"; if(p<=70) return "#f5c04e"; if(p<=90) return "#f08b4b"; return "#e5484d"; }
function toast(msg){
  let t=document.getElementById("zt-toast");
  if(!t){ t=document.createElement("div"); t.id="zt-toast";
    t.style.cssText="position:fixed;right:22px;bottom:92px;background:#111c;backdrop-filter:blur(6px);color:#fff;padding:10px 14px;border-radius:10px;z-index:2147483647;font:13px Inter;transition:.2s;opacity:0";
    document.body.appendChild(t);
  }
  t.textContent=msg; t.style.opacity="1"; setTimeout(()=>{ t.style.opacity="0"; }, 2200);
}

/* ───────────────── Chat capture ───────────────── */
const UI_BLACKLIST=/^(zerotoken|checkpoint|generate|login|logout|register|auto-saved|unlimited handoffs active|first handoff|progress|token meter)/i;
/* hız: chunk sayısını azalt */
const MAX_CHUNK_CHARS=8000;

function collectConversationChunks(maxChunkChars=MAX_CHUNK_CHARS){
  const nodes=Array.from(document.querySelectorAll('[data-message-author-role] .markdown, [data-message-author-role] article, main .markdown, main article'));
  const texts=nodes
    .filter(n=>!n.closest('#zt-panel')&&!n.closest('#zt-handoff-modal')&&!n.closest('#zt-auth-modal'))
    .map(n=>(n.innerText||"").split("\n").filter(line=>!UI_BLACKLIST.test(line.trim())).join("\n"))
    .filter(Boolean);
  const joined=texts.join("\n\n");
  approxTokens=estimateTokensFromText(joined);
  const chunks=[]; for(let i=0;i<joined.length;i+=maxChunkChars) chunks.push(joined.slice(i,i+maxChunkChars));
  return chunks;
}

/* ───────────────── Sanitize (client) ───────────────── */
function sanitizeTextClient(s){
  if(!s) return s;
  s=s.replace(/\b[A-Za-z0-9_-]{10,}\.[A-Za-z0-9_-]{10,}\.[A-Za-z0-9_-]{10,}\b/g,"[REDACTED_TOKEN]");
  s=s.replace(/(Bearer\s+[A-Za-z0-9._-]+)/gi,"Bearer [REDACTED]");
  s=s.replace(/\bapikey\s*:\s*[A-Za-z0-9._-]+/gi,"apikey: [REDACTED]");
  s=s.replace(/\bSUPABASE_[A-Z_]*KEY\b.*$/gmi,"SUPABASE_[…]KEY=[REDACTED]");
  s=s.replace(/https?:\/\/[^\s)'"`]+/g,(u)=>{ try{ const url=new URL(u); url.search=""; return url.toString(); }catch{ return u; } });
  return s;
}
function sanitizeChunks(chunks){ return chunks.map(sanitizeTextClient); }

/* ───────────────── Quotas ───────────────── */
async function canTakeCheckpoint(){ if(currentUser&&supabase){ try{ const {data}=await supabase.rpc("can_take_checkpoint",{uid:currentUser.id}); return !!data; }catch{return true;} } return getLocalCount("cp")<3; }
async function markCheckpoint(){ if(currentUser&&supabase){ try{ await supabase.rpc("mark_checkpoint",{uid:currentUser.id}); }catch{} if(userProfile) userProfile.checkpoint_used=(userProfile.checkpoint_used||0)+1; } else bumpLocalCount("cp"); }
async function canTakeHandoff(){ if(currentUser&&supabase){ try{ const {data}=await supabase.rpc("can_take_handoff",{uid:currentUser.id}); return !!data; }catch{return true;} } return getLocalCount("ho")<1; }
async function markHandoff(){ if(currentUser&&supabase){ try{ await supabase.rpc("mark_handoff",{uid:currentUser.id}); }catch{} if(userProfile) userProfile.handoff_used=(userProfile.handoff_used||0)+1; } else bumpLocalCount("ho"); }

/* ───────────────── Lazy-load ───────────────── */
async function silentlyLoadAllHistory(maxSteps=1){
  const el=document.querySelector('[data-testid="conversation-turns"]')||document.documentElement;
  let steps=0; while(steps++<maxSteps){
    const prev=el.scrollTop; el.scrollTop=Math.max(0,prev-1);
    await new Promise(r=>setTimeout(r,60)); el.scrollTop=prev;
    await new Promise(r=>setTimeout(r,120));
  }
}

/* ───────────────── Panel ───────────────── */
function renderOnce(){
  if(uiMounted) return; uiMounted=true;
  const root=document.createElement("div");
  root.id="zt-panel";
  root.style.cssText="position:fixed;right:18px;bottom:18px;width:330px;background:#0b0d12;color:#e6ebff;border:1px solid #1b2030;border-radius:16px;box-shadow:0 12px 44px rgba(0,0,0,.45);padding:14px;z-index:999998;font:13px/1.45 Inter,system-ui";
  root.style.zIndex = '2147483647';
  root.style.pointerEvents = 'auto';

  root.innerHTML=`
    <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:8px">
  <div class="zt-brand"><div class="zt-wordmark"></div></div>
  <div id="zt-token-fig" style="opacity:.75">0 tokens · 0%</div>
</div>

    <div style="height:8px;border-radius:6px;background:#1a2234;overflow:hidden;margin-bottom:8px">
      <div id="zt-bar" style="height:8px;width:0%;background:#25c277"></div>
    </div>

    <div id="zt-account" style="display:flex;gap:8px;align-items:center;justify-content:space-between;margin:6px 0 12px 0">
      <div id="zt-account-chip" style="font-size:12px;opacity:.9">Guest mode</div>
      <div id="zt-auth-actions" style="display:flex;gap:6px">
        <button id="zt-login-btn" style="background:#1f2a44;border:0;color:#fff;padding:6px 8px;border-radius:8px;cursor:pointer">Login</button>
        <button id="zt-reg-btn"   style="background:#263150;border:0;color:#fff;padding:6px 8px;border-radius:8px;cursor:pointer">Register</button>
      </div>
    </div>

    <div style="font-size:12px;opacity:.85;margin-bottom:10px">
      Auto-saved ✓ <span id="zt-saved-ago">just now</span>
    </div>

    <div style="padding:10px;background:#0f1422;border:1px solid #1c2333;border-radius:10px;margin-bottom:10px">
      <div style="font-weight:600;margin-bottom:4px">Checkpoint</div>
      <div id="zt-cp-status" style="opacity:.9">Checking…</div>
    </div>

    <button id="zt-handoff-btn"><span class="label">Generate Handoff</span></button>
    <div id="zt-hint" style="text-align:center;font-size:12px;opacity:.8;margin-top:6px"></div>

    <div id="zt-progress" style="display:none;margin-top:8px">
      <div style="display:flex;justify-content:space-between;font-size:12px;opacity:.85">
        <span id="zt-prog-label">Generating…</span><span id="zt-prog-fig">0%</span>
      </div>
      <div style="height:6px;border-radius:6px;background:#1a2234;overflow:hidden;margin-top:4px">
        <div id="zt-prog-bar" style="height:6px;width:0%;background:#5b8cff"></div>
      </div>
    </div>
  `;

  // Shadow içine yerleştir ve temayı yükle
  mountIntoShadow(root);
  injectThemeCss();

  // Event listener'ları Shadow içinden bağla
  const wrap = ztShadow?.getElementById('zt-wrap');
  wrap?.querySelector("#zt-login-btn")?.addEventListener('click', ()=>openAuthMiniModal("login"));
  wrap?.querySelector("#zt-reg-btn")?.addEventListener('click', ()=>openAuthMiniModal("register"));
  wrap?.querySelector("#zt-handoff-btn")?.addEventListener('click', onHandoffClick);
}

function openAuthMiniModal(mode){
  let w=document.getElementById("zt-auth-modal"); if(w) w.remove();
  w=document.createElement("div"); w.id="zt-auth-modal";
  w.style.cssText="position:fixed;inset:0;background:#0008;z-index:100000;display:flex;align-items:center;justify-content:center;";
  w.innerHTML=`
    <div style="background:#0f1115;color:#fff;border:1px solid #1b2030;border-radius:14px;padding:18px;min-width:320px">
      <div style="font-weight:600;margin-bottom:10px">${mode==="login"?"Login":"Register"}</div>
      <input id="zt-auth-email" placeholder="email@example.com" style="width:100%;padding:8px;border-radius:8px;border:1px solid #263150;background:#0b0d12;color:#fff;margin-bottom:8px"/>
      <input id="zt-auth-pass"  placeholder="password" type="password" style="width:100%;padding:8px;border-radius:8px;border:1px solid #263150;background:#0b0d12;color:#fff;margin-bottom:12px"/>
      <div style="display:flex;gap:8px;justify-content:flex-end">
        <button id="zt-auth-cancel" style="background:#222;border:0;color:#fff;padding:8px 10px;border-radius:8px;cursor:pointer">Cancel</button>
        <button id="zt-auth-ok" style="background:#6a5cff;border:0;color:#fff;padding:8px 12px;border-radius:8px;cursor:pointer">${mode==="login"?"Login":"Create"}</button>
      </div>
    </div>`;
  document.body.appendChild(w);
  w.querySelector("#zt-auth-cancel").onclick=()=>w.remove();
  w.querySelector("#zt-auth-ok").onclick=async()=>{
    const email=w.querySelector("#zt-auth-email").value.trim();
    const password=w.querySelector("#zt-auth-pass").value;

    // Supabase hazır mı? (maks. 2 sn bekle)
    async function waitForSupabase(ms = 2000) {
      const t0 = performance.now();
      while (!supabase && performance.now() - t0 < ms) {
        ensureSupabase();
        await new Promise(r => setTimeout(r, 100));
      }
      return !!supabase;
    }
    if (!(await waitForSupabase())) {
      alert("Connection not ready yet. Please try again in a moment.");
      return;
    }

    try{
      if(mode==="login"){
        const {error}=await supabase.auth.signInWithPassword({email,password});
        if(error) throw error;
      } else {
        const {error}=await supabase.auth.signUp({email,password});
        if(error) throw error;
      }
      await refreshSessionAndProfile(); updateAccountChip(); updateCheckpointStatusUI();
      toast(mode==="login"?"Logged in ✓":"Registered ✓ Check email if required"); w.remove();
    }catch(e){ alert(e?.message||String(e)); }
  };
}

function updateAccountChip(){
  const wrap = ztShadow?.getElementById('zt-wrap');
  const chip=wrap?.querySelector("#zt-account-chip");
  const actions=wrap?.querySelector("#zt-auth-actions");
  if(!chip||!actions) return;
  if(currentUser?.email){
    chip.textContent=currentUser.email;
    actions.innerHTML=`<button id="zt-logout-btn" style="background:#2a203a;border:0;color:#fff;padding:6px 8px;border-radius:8px;cursor:pointer">Logout</button>`;
    wrap.querySelector("#zt-logout-btn").onclick=async()=>{
      ensureSupabase();
      if(supabase) await supabase.auth.signOut().catch(()=>{});
      currentUser=null; userProfile=null; updateAccountChip(); updateCheckpointStatusUI(); toast("Logged out");
    };
  }else{
    chip.textContent="Guest mode";
    actions.innerHTML=`
      <button id="zt-login-btn" style="background:#1f2a44;border:0;color:#fff;padding:6px 8px;border-radius:8px;cursor:pointer">Login</button>
      <button id="zt-reg-btn"   style="background:#263150;border:0;color:#fff;padding:6px 8px;border-radius:8px;cursor:pointer">Register</button>`;
    wrap.querySelector("#zt-login-btn").onclick=()=>openAuthMiniModal("login");
    wrap.querySelector("#zt-reg-btn").onclick=()=>openAuthMiniModal("register");
  }
}

function updateDynamicUI(){
  const wrap = ztShadow?.getElementById('zt-wrap');
  const usedPct=Math.min(100,Math.round((approxTokens/TOKEN_LIMIT)*1000)/10);
  const fig=wrap?.querySelector("#zt-token-fig");
  const bar=wrap?.querySelector("#zt-bar");
  const hint=wrap?.querySelector("#zt-hint");
  if(fig) fig.textContent=`${(approxTokens||0).toLocaleString()} tokens · ${usedPct}%`;
  if(bar){ bar.style.width=`${usedPct}%`; bar.style.background=pctColor(usedPct); }
  const plan=(userProfile?.plan||"free");
  if(hint){ hint.textContent=plan==="vault"?"ZeroToken Pro active · unlimited handoffs":"🎁 First handoff is full ZeroToken Pro experience"; }
}

async function updateCheckpointStatusUI(){
  const wrap = ztShadow?.getElementById('zt-wrap');
  const el=wrap?.querySelector("#zt-cp-status"); if(!el) return;
  if(!currentUser){ el.textContent=`Used: ${getLocalCount("cp")}/3 (local)`; return; }
  const used=userProfile?.checkpoint_used ?? 0;
  el.textContent=(userProfile?.plan||"free")==="vault"?"Auto-save: Unlimited":`Used: ${used}/3`;
}

/* ───────────────── Premium Modal ───────────────── */
function openHandoffModal({jobId,title,result,meta,plan}){
  let overlay=document.getElementById("zt-handoff-modal"); if(overlay) overlay.remove();
  overlay=document.createElement("div"); overlay.id="zt-handoff-modal";
  overlay.style.cssText="position:fixed;inset:0;background:rgba(17,17,17,.6);backdrop-filter:blur(2px);z-index:2147483647;display:flex;align-items:center;justify-content:center;padding:22px;";
  const modal=document.createElement("div"); modal.style.cssText="width:min(920px,92vw);max-height:86vh;overflow:auto;background:#0b0c10;color:#e8e8e8;border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,.5);font:14px/1.6 Inter,system-ui;";
  const header=document.createElement("div"); header.style.cssText="position:sticky;top:0;background:#0b0c10;border-bottom:1px solid #1f2229;padding:14px 16px;display:flex;justify-content:space-between;gap:12px;align-items:center;";
  header.innerHTML=`
    <div>
      <div style="font-weight:700;font-size:16px">${escapeHtml(title||"Handoff Report")}</div>
      <div style="opacity:.75;font-size:12px">${meta?.createdAt??""} · ${meta?.model??""} · tokens: ${meta?.tokens??"–"} · checkpoints: ${meta?.checkpoints??"–"}</div>
    </div>
    <div style="display:flex;gap:8px">
      <button data-act="copy" class="zt-btn">Copy</button>
      <button data-act="pdf" class="zt-btn">PDF</button>
      <button data-act="email" class="zt-btn">E-mail</button>
      <button data-act="close" class="zt-btn" style="background:#252833">Close</button>
    </div>`;
  const content=document.createElement("div"); content.style.cssText="padding:18px 16px";
  content.innerHTML=`<div class="zt-md" id="zt-md">${escapeHtml(result).replace(/\n/g,"<br/>")}</div>`;
  const footer=document.createElement("div"); footer.style.cssText="position:sticky;bottom:0;background:#0b0c10;border-top:1px solid #1f2229;padding:12px 16px;";
  footer.innerHTML=(plan==="vault")
    ? `<div style="opacity:.7;font-size:12px">ZeroToken Pro active · unlimited handoffs</div>`
    : `<div style="display:flex;justify-content:space-between;gap:12px;align-items:center">
         <div style="font-size:13px;opacity:.9">First handoff is full <b>ZeroToken Pro</b> experience. Want unlimited?</div>
         <button data-act="upgrade" class="zt-btn" style="background:#7c5cff">Upgrade to ZeroToken Pro</button>
       </div>`;
  const style=document.createElement("style"); style.textContent=`
    .zt-btn{background:#323644;color:#fff;border:0;padding:8px 12px;border-radius:10px;cursor:pointer;font-weight:600}
    .zt-btn:hover{filter:brightness(1.08)}
    @media print{ body *{visibility:hidden} #zt-printable,#zt-printable *{visibility:visible} #zt-printable{position:absolute;left:0;top:0;width:100%}}
    .zt-md h2{margin:18px 0 8px;font-size:18px} .zt-md p{margin:0 0 10px}
    .zt-md pre{background:#0e1016;padding:12px;border-radius:10px;overflow:auto} .zt-md code{background:#0e1016;padding:2px 6px;border-radius:6px}
  `;
  modal.appendChild(style); modal.appendChild(header); modal.appendChild(content); modal.appendChild(footer);
  overlay.appendChild(modal); document.body.appendChild(overlay);
  overlay.addEventListener("click",(e)=>{ if(e.target===overlay) close(); });
  modal.querySelector('[data-act="close"]').addEventListener("click", close);
  modal.querySelector('[data-act="copy"]').addEventListener("click", async ()=>{ try{ await navigator.clipboard.writeText(result); toast("Copied ✓"); }catch{ fallbackCopy(result); toast("Copied (fallback) ✓"); } });
  modal.querySelector('[data-act="pdf"]').addEventListener("click", ()=>{
    const w=window.open("","_blank"); if(!w){ toast("Popup blocked"); return; }
    const html=`<html><head><title>${escapeHtml(title||"Handoff Report")}</title><style>
      body{font:14px/1.6 Inter,system-ui;margin:24px;color:#111} h2{margin:18px 0 6px;font-size:18px}
      pre{background:#f5f7fa;padding:12px;border-radius:8px;overflow:auto} code{background:#f5f7fa;padding:2px 6px;border-radius:4px}
    </style></head><body id="zt-printable">
      <h1 style="font:600 20px Inter;margin:0 0 8px">${escapeHtml(title||"Handoff Report")}</h1>
      <div style="opacity:.7;font-size:12px;margin-bottom:12px">${escapeHtml(meta?.createdAt??"")} · ${escapeHtml(meta?.model??"")} · tokens: ${escapeHtml(String(meta?.tokens??"–"))} · checkpoints: ${escapeHtml(String(meta?.checkpoints??"–"))}</div>
      ${escapeHtml(result).replace(/\n/g,"<br/>")}
    </body></html>`;
    w.document.write(html); w.document.close(); w.focus(); w.print();
  });
  modal.querySelector('[data-act="email"]').addEventListener("click", async ()=>{
    const to=prompt("Send to e-mail:"); if(!to) return;
    let accessToken=null; try{ ensureSupabase(); if(supabase){ const {data:{session}}=await supabase.auth.getSession(); accessToken=session?.access_token||null; } }catch{}
    if(!accessToken){ alert("Please login first to send by email."); return; }
    try{
      const r=await fetch(EMAIL_ENDPOINT,{ method:"POST", headers:{ "Content-Type":"application/json","Authorization":`Bearer ${accessToken}` }, body:JSON.stringify({jobId,to}) });
      if(!r.ok) throw new Error(await r.text()); toast("E-mail sent ✓");
    }catch(e){ console.error(e); toast("E-mail failed"); }
  });
  const upg=modal.querySelector('[data-act="upgrade"]'); if(upg) upg.addEventListener("click", ()=>{ window.open("https://zerotoken.ai/upgrade?plan=pro","_blank"); });
  function close(){ document.body.removeChild(overlay); }
  function fallbackCopy(text){ const ta=document.createElement("textarea"); ta.value=text; document.body.appendChild(ta); ta.select(); document.execCommand("copy"); ta.remove(); }
  function escapeHtml(s){ return s?.replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]))??""; }
}

/* ───────────────── Tween helper ───────────────── */
function tweenPercent(from,to,durationMs,onFrame,done){
  const start=performance.now(), delta=to-from;
  function frame(now){
    const t=Math.min(1,(now-start)/durationMs), eased=1-Math.pow(1-t,3), val=from+delta*eased;
    onFrame(val); if(t<1) requestAnimationFrame(frame); else done&&done();
  }
  requestAnimationFrame(frame);
}

/* ───────────────── Start→Status (smoother) ───────────────── */
async function onHandoffClick(){
  if(uiBusy) return; uiBusy=true;
  const wrap = ztShadow?.getElementById('zt-wrap');
  const btn=wrap?.querySelector("#zt-handoff-btn");
  const progress=wrap?.querySelector("#zt-progress");
  const progBar=wrap?.querySelector("#zt-prog-bar");
  const progFig=wrap?.querySelector("#zt-prog-fig");
  const progLabel=wrap?.querySelector("#zt-prog-label");

  // UI: markup bozulmadan loading state
  if (btn) {
    btn.disabled = true;
    btn.classList.add('zt-loading');
    const labelEl = btn.querySelector('.zt-cta-label');
    if (labelEl) labelEl.textContent = "Generating…";
  }
  if (progress) progress.style.display="block"; if(progLabel) progLabel.textContent="Mapping…";

  let shownPct=0; const setPct=(p)=>{ const c=Math.max(0,Math.min(100,p)); shownPct=c; if(progBar) progBar.style.width=`${c|0}%`; if(progFig) progFig.textContent=`${c|0}%`; };
  setPct(0);

  // Ağırlıklar server'dan gelirse kullan; yoksa (65/35)
  let optimisticCap=65;
  let lastServerPct=0, lastServerTs=Date.now();
  let stage="queued";

  const optTimer=setInterval(()=>{ const since=Date.now()-lastServerTs; if(since>1200){ const target=Math.min(optimisticCap, (shownPct+Math.max(0.8,(since/3000)))); if(target>shownPct) tweenPercent(shownPct,target,400,setPct); } },800);

  try{
    const okToHandoff=await canTakeHandoff();
    if(!okToHandoff && (userProfile?.plan||"free")!=="vault"){ alert("You used your free handoff. Upgrade to ZeroToken Pro for unlimited."); return; }

    await silentlyLoadAllHistory();
    const chunks=sanitizeChunks(collectConversationChunks());
    const title=document.title||"Untitled Thread";

    const startRes=await fetch(EDGE_START,{ method:"POST", headers:{ "Content-Type":"application/json","Authorization":`Bearer ${SUPABASE_ANON_KEY}`,"apikey":SUPABASE_ANON_KEY }, body:JSON.stringify({ userId:currentUser?.id||null, plan:(userProfile?.plan||"free").toLowerCase(), title, threadId:getThreadId(), chunks }) });
    if(!startRes.ok) throw new Error(await startRes.text());
    const { job_id, meta }=await startRes.json();

    await new Promise((resolve,reject)=>{
      const safetyTimer=setTimeout(()=>{ try{ if(progress) progress.style.display="none"; }catch{} reject(new Error("Timeout while generating handoff")); },180000);

      const tick=async()=>{
        try{
          const r=await fetch(`${EDGE_STATUS}?job=${job_id}&t=${Date.now()}`,{ headers:{ "Authorization":`Bearer ${SUPABASE_ANON_KEY}`,"apikey":SUPABASE_ANON_KEY } });
          if(!r.ok) throw new Error(await r.text());
          const st=await r.json();

          // stage display + optimistic ceilings
          if(st.stage && st.stage!==stage){
            stage=st.stage;
            if(stage==="mapping"){ optimisticCap=Number(st.map_pct ?? 65); if(progLabel) progLabel.textContent="Mapping…"; }
            else if(stage==="reduce"){ optimisticCap=Number((st.map_pct ?? 65)) + Number((st.reduce_pct ?? 35)); if(progLabel) progLabel.textContent="Synthesizing…"; }
            else if(stage==="final"){ optimisticCap=100; }
          }

          // Ağırlıklı toplam (bar geri düşmez)
          const wMap     = Number(st.map_pct ?? 65);
          const wReduce  = Number(st.reduce_pct ?? (100 - wMap));
          const sp       = Math.max(0, Math.min(100, st.percent|0));
          let totalPct   = sp;
          if (stage === "mapping" || (!stage && st.stage==="mapping")) {
            totalPct = Math.min(100, Math.round((sp * wMap) / 100));
          } else if (stage === "reduce" || stage === "final") {
            totalPct = Math.min(100, Math.round(wMap + (sp * wReduce) / 100));
            if (progLabel && stage === "reduce") progLabel.textContent="Synthesizing…";
          }

          if (totalPct > lastServerPct){ lastServerPct=totalPct; lastServerTs=Date.now(); tweenPercent(shownPct,totalPct,300,setPct); }

          const finished=(st.status==="done") || (st.has_result===true) || (!!st.result && st.result.length>0);
          if(finished){
            clearTimeout(safetyTimer); clearInterval(optTimer);
            tweenPercent(shownPct,100,400,setPct,()=>{
              const bar=ztShadow?.getElementById('zt-wrap')?.querySelector("#zt-prog-bar"); if(bar) bar.style.background="#25c277";
              openHandoffModal({
                jobId:job_id, title, result:st.result||"(empty)",
                meta:{ createdAt:new Date().toLocaleString("en-GB",{hour12:false}), model:meta?.model||"Unknown", tokens:meta?.token_estimate??undefined, checkpoints:meta?.checkpoint_count??undefined },
                plan:(userProfile?.plan||"free")
              });
            });
            resolve(true); return;
          }
          setTimeout(tick,450);
        }catch{ setTimeout(tick,700); }
      };
      tick();
    });

    await markHandoff();

  }catch(e){
    alert("Handoff failed: "+(e?.message||e));
  }finally{
    clearInterval(optTimer);
    const wrap = ztShadow?.getElementById('zt-wrap');
    const progress=wrap?.querySelector("#zt-progress");
    const btn=wrap?.querySelector("#zt-handoff-btn");
    if(btn){
      btn.disabled=false;
      btn.classList.remove('zt-loading');
      const lbl = btn.querySelector('.zt-cta-label');
      if (lbl) lbl.textContent = "Generate Handoff";
    }
    uiBusy=false; updateCheckpointStatusUI();
    setTimeout(()=>{ if(progress) progress.style.display="none"; },1200);
  }
}

/* ───────────────── Auto-checkpoint ───────────────── */
async function maybeAutoCheckpoint(){
  const delta=approxTokens-lastSavedTokens, threshold=3000;
  if(delta>=threshold){
    const ok=await canTakeCheckpoint();
    if(!ok && (userProfile?.plan||"free")!=="vault"){ lastSavedTokens=approxTokens; return; }
    await markCheckpoint(); lastSavedTokens=approxTokens;
    const wrap = ztShadow?.getElementById('zt-wrap');
    const ago=wrap?.querySelector("#zt-saved-ago"); if(ago) ago.textContent="just now";
    updateCheckpointStatusUI(); toast("Auto-checkpoint saved ✓");
  }
}

/* ───────────────── Main ───────────────── */
(function(){ (async()=>{
  ensureSupabase();
  await refreshSessionAndProfile(); renderOnce(); updateAccountChip();
  collectConversationChunks(); updateDynamicUI(); updateCheckpointStatusUI();
  setInterval(()=>{
    ensureSupabase();
    ensurePanelVisible();        // Shadow içinde paneli canlı tut
    collectConversationChunks(); updateDynamicUI(); updateCheckpointStatusUI();
    maybeAutoCheckpoint().catch(()=>{});
  },1500);
})(); })();

// === ZeroToken: tag CTA & Logout for stable theming ===
(function tagZtElements(){
  const HOST_ID='zt-host';
  function getShadow(){ return document.getElementById(HOST_ID)?.shadowRoot || null; }
  function tag(){
    const sh = getShadow(); if(!sh) return;
    // CTA: metninde "Generate Handoff" geçen buton
    const btns = Array.from(sh.querySelectorAll('button'));
    const cta  = btns.find(b => /generate\s+handoff/i.test(b.textContent || ''));
    if(cta) cta.setAttribute('data-zt','cta');

    // Logout
    const logout = btns.find(b => /logout/i.test(b.textContent || ''));
    if(logout) logout.setAttribute('data-action','logout');
  }
  const obs = new MutationObserver(tag);
  const sh0 = getShadow();
  if(sh0) obs.observe(sh0, {subtree:true, childList:true});
  tag();
})();

// === ZeroToken: Stable tagging for CTA & Logout (visual theming) ===
(function(){
  const HOST_ID='zt-host';
  function sh(){ return document.getElementById(HOST_ID)?.shadowRoot || null; }

  function tagOnce(){
    const root = sh(); if(!root) return;

    const all = Array.from(root.querySelectorAll('button, [role="button"]'));
    // CTA
    const cta = all.find(el => /generate\s+handoff/i.test(el.textContent || ''));
    if (cta && !cta.hasAttribute('data-zt')) cta.setAttribute('data-zt','cta');

    // Logout
    const lo = all.find(el => /logout/i.test(el.textContent || ''));
    if (lo && !lo.hasAttribute('data-action')) lo.setAttribute('data-action','logout');
  }

  // İlk etiketleme
  tagOnce();

  // Render değişimlerinde tekrar dener
  const mo = new MutationObserver(() => { try{ tagOnce(); }catch{} });
  const root0 = sh();
  if (root0) mo.observe(root0, { subtree:true, childList:true });
})();

// === ZeroToken: post-render sanitizer (Shadow DOM) ===
(function(){
  const HOST = 'zt-host';
  function sh(){ return document.getElementById(HOST)?.shadowRoot || null; }

  function killUnwantedBranding(root){
    if(!root) return;
    // 1) ZeroTokenTrans.png -> img + inline background KILL
    root.querySelectorAll('img[src*="ZeroTokenTrans.png"]').forEach(img => img.remove());
    root.querySelectorAll('[style*="ZeroTokenTrans.png"]').forEach(el => {
      el.style.background = 'none';
      el.style.backgroundImage = 'none';
    });
  }

  function tagControls(root){
    if(!root) return;
    const btns = Array.from(root.querySelectorAll('button, [role="button"]'));
    // CTA
    const cta = btns.find(b => /generate\s+handoff/i.test(b.textContent || ''));
    if (cta) cta.setAttribute('data-zt','cta');
    // Logout
    const lo  = btns.find(b => /logout/i.test(b.textContent || ''));
    if (lo)  lo.setAttribute('data-action','logout');
  }

  function applyCTAVisual(root){
    const cta = root?.querySelector('button[data-zt="cta"]');
    if(!cta) return;
    // İçerik gizle
    Array.from(cta.children).forEach(ch => ch.style.visibility = 'hidden');
    // Lime zemin + ölçüler
    Object.assign(cta.style, {
      position:'relative', display:'flex', alignItems:'center', justifyContent:'center',
      width:'100%', minHeight:'46px', padding:'12px 16px 12px 52px',
      borderRadius:'16px', border:'1px solid rgba(255,255,255,.10)',
      background:'#c1ff72', color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px',
      boxShadow:'0 6px 20px rgba(193,255,114,.28)', overflow:'hidden'
    });
    // Pseudo yerine gerçek overlay (::after cross-origin sorunlarını by-pass)
    let ov = cta.querySelector('.zt-cta-text');
    if(!ov){
      ov = document.createElement('span');
      ov.className = 'zt-cta-text';
      cta.appendChild(ov);
    }
    Object.assign(ov.style, {
      position:'absolute', left:'50%', top:'50%', transform:'translate(-50%,-50%)',
      color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px', lineHeight:'1',
      pointerEvents:'none', visibility:'visible'
    });
    ov.textContent = 'Generate Handoff';

    let icon = cta.querySelector('.zt-cta-icon');
    if(!icon){
      icon = document.createElement('span');
      icon.className = 'zt-cta-icon';
      cta.appendChild(icon);
    }
    Object.assign(icon.style, {
      position:'absolute', left:'16px', top:'50%', transform:'translateY(-50%)',
      width:'18px', height:'18px', backgroundSize:'contain', backgroundRepeat:'no-repeat',
      backgroundImage:`url(${chrome.runtime.getURL('assets/zticontrans.png')})`,
      pointerEvents:'none', visibility:'visible'
    });
  }

  function fixLogout(root){
    const lo = root?.querySelector('button[data-action="logout"]');
    if(!lo) return;
    Object.assign(lo.style, {
      background:'#1e1e1e', color:'#eaeef7',
      border:'1px solid rgba(255,255,255,.1)', borderRadius:'12px',
      padding:'8px 14px', fontWeight:'700'
    });
  }

  function pinSmallWordmark(){
    const panel = sh()?.getElementById?.('zt-panel');
    if(!panel) return;
    panel.style.position = 'relative';
    // Tek seferlik küçük wordmark (ZTblackbckgrn.png)
    if(!panel.querySelector('.zt-wordmark-fixed')){
      const wm = document.createElement('div');
      wm.className = 'zt-wordmark-fixed';
      Object.assign(wm.style, {
        position:'absolute', top:'10px', left:'12px', width:'118px', height:'20px',
        backgroundImage:`url(${chrome.runtime.getURL('assets/ZTblackbckgrn.png')})`,
        backgroundRepeat:'no-repeat', backgroundPosition:'left center', backgroundSize:'contain',
        pointerEvents:'none', filter:'drop-shadow(0 2px 6px rgba(0,0,0,.25))'
      });
      panel.appendChild(wm);
      // panel üst boşluğu
      const padTop = parseInt(getComputedStyle(panel).paddingTop||'0',10);
      if(padTop < 40) panel.style.paddingTop = '40px';
    }
  }

  function run(){
    const root = sh(); if(!root) return;
    killUnwantedBranding(root);
    tagControls(root);
    applyCTAVisual(root);
    fixLogout(root);
    pinSmallWordmark();
  }

  // İlk çalıştır
  run();
  // Reflow'larda tekrar uygula
  const root0 = sh();
  if(root0){
    const mo = new MutationObserver(()=>{ try{ run(); }catch(e){} });
    mo.observe(root0, {subtree:true, childList:true, attributes:true, attributeFilter:['style','class']});
  }
})();

// === ZeroToken: hard sanitizer (kill hero, force CTA) ===
(function(){
  const HOST='zt-host';
  const R_HERO = /(ZeroTokenTrans\.png|ZTblackbckgrn\.png)/i; // dev görsel hangi isimle gelirse gelsin
  function sh(){ return document.getElementById(HOST)?.shadowRoot || null; }

  function killHero(root){
    if(!root) return;
    // 1) Background-image ile gelenler
    root.querySelectorAll('[style*="background"]').forEach(el=>{
      const s = (el.getAttribute('style')||'').toLowerCase();
      if (R_HERO.test(s)) {
        el.style.background = 'none';
        el.style.backgroundImage = 'none';
      }
    });
    // 2) <img> ile gelenler
    root.querySelectorAll('img').forEach(img=>{
      const src=(img.getAttribute('src')||'').toLowerCase();
      if (R_HERO.test(src)) img.remove();
    });
    // 3) Progress bar’ın ÜSTÜNDE kalan “büyük yüksekliğe” sahip görsel blokları süpür
    const pb = root.querySelector('[role="progressbar"]');
    if(pb){
      // Kapsayıcıyı bul (panel)
      const panel = root.getElementById('zt-panel') || pb.closest('#zt-panel') || root;
      // progress bar’dan önceki node’larda 80px’ten büyük backgrounlu alanları sıfırla
      let n = pb.previousElementSibling;
      while(n){
        const cs = getComputedStyle(n);
        if ((parseInt(cs.height)||0) > 80 && /url\(/.test(cs.backgroundImage)) {
          n.style.background = 'none';
          n.style.backgroundImage = 'none';
        }
        n = n.previousElementSibling;
      }
      // Küçük wordmark’ı sabitle
      if (panel && !panel.querySelector('.zt-wordmark-fixed')) {
        const wm = document.createElement('div');
        wm.className='zt-wordmark-fixed';
        Object.assign(wm.style,{
          position:'absolute', top:'10px', left:'12px', width:'118px', height:'20px',
          backgroundImage:`url(${chrome.runtime.getURL('assets/ZTblackbckgrn.png')})`,
          backgroundRepeat:'no-repeat', backgroundPosition:'left center', backgroundSize:'contain',
          pointerEvents:'none', filter:'drop-shadow(0 2px 6px rgba(0,0,0,.25))'
        });
        panel.style.position='relative';
        const padTop=parseInt(getComputedStyle(panel).paddingTop||'0',10);
        if(padTop<40) panel.style.paddingTop='40px';
        panel.appendChild(wm);
      }
    }
  }

  function tagAndForceButtons(root){
    if(!root) return;
    const btns=[...root.querySelectorAll('button, [role="button"]')];

    // CTA tespiti: "Generate Handoff" metni veya ⚡ emojisi
    const CTA_RX = /(generate\s*handoff|handoff oluştur)/i;
    const cta = btns.find(b=> CTA_RX.test(b.textContent||'') || /⚡/.test(b.innerHTML||''));
    if (cta){
      cta.setAttribute('data-zt','cta');
      // içerikleri gizle
      [...cta.children].forEach(ch=> ch.style.visibility='hidden');
      // lime stile zorla (inline => override edilemez)
      Object.assign(cta.style,{
        position:'relative', display:'flex', alignItems:'center', justifyContent:'center',
        width:'100%', minHeight:'46px', padding:'12px 16px 12px 52px',
        borderRadius:'16px', border:'1px solid rgba(255,255,255,.10)',
        background:'#c1ff72', color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px',
        boxShadow:'0 6px 20px rgba(193,255,114,.28)', overflow:'hidden'
      });
      // metin overlay
      let text = cta.querySelector('.zt-cta-text');
      if(!text){ text=document.createElement('span'); text.className='zt-cta-text'; cta.appendChild(text); }
      Object.assign(text.style,{
        position:'absolute', left:'50%', top:'50%', transform:'translate(-50%,-50%)',
        color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px', lineHeight:'1',
        pointerEvents:'none', visibility:'visible'
      });
      text.textContent='Generate Handoff';
      // ikon
      let icon = cta.querySelector('.zt-cta-icon');
      if(!icon){ icon=document.createElement('span'); icon.className='zt-cta-icon'; cta.appendChild(icon); }
      Object.assign(icon.style,{
        position:'absolute', left:'16px', top:'50%', transform:'translateY(-50%)',
        width:'18px', height:'18px',
        backgroundImage:`url(${chrome.runtime.getURL('assets/zticontrans.png')})`,
        backgroundRepeat:'no-repeat', backgroundPosition:'center', backgroundSize:'contain',
        pointerEvents:'none', visibility:'visible'
      });
      cta.onmouseenter=()=>{ cta.style.background='#a6ff3b'; cta.style.transform='translateY(-1px)'; };
      cta.onmouseleave=()=>{ cta.style.background='#c1ff72'; cta.style.transform='none'; };
    }

    // Logout’u ayır
    const lo = btns.find(b=> /logout/i.test(b.textContent||''));
    if (lo){
      lo.setAttribute('data-action','logout');
      Object.assign(lo.style,{
        background:'#1e1e1e', color:'#eaeef7',
        border:'1px solid rgba(255,255,255,.1)', borderRadius:'12px',
        padding:'8px 14px', fontWeight:'700'
      });
    }
  }

  function run(){
    const root=sh(); if(!root) return;
    killHero(root);
    tagAndForceButtons(root);
  }

  run();
  const r=sh();
  if(r){
    const mo=new MutationObserver(()=>{ try{ run(); }catch{} });
    mo.observe(r,{subtree:true, childList:true, attributes:true, attributeFilter:['style','class']});
  }
})();

// ===== ZeroToken: final hard sanitizer (kill hero + force CTA) =====
(function(){
  const HOST='zt-host';
  const HERO_RX = /(ZeroTokenTrans\.png|ZTblackbckgrn\.png)/i;

  function sh(){ return document.getElementById(HOST)?.shadowRoot || null; }

  function killHeroAndTidy(root){
    const pb = root.querySelector('[role="progressbar"]');
    if(!pb) return;
    let cur = pb.previousElementSibling;
    while(cur){
      const cs = getComputedStyle(cur);
      const bg = cs.backgroundImage||'';
      const h  = parseInt(cs.height)||0;
      const looksHero = h>80 || HERO_RX.test(bg);
      if(looksHero){
        cur.style.background = 'none';
        cur.style.backgroundImage = 'none';
        cur.querySelectorAll('img').forEach(i=>i.remove());
        cur.style.minHeight='0'; cur.style.height='0';
        cur.style.padding='0'; cur.style.margin='0 0 8px 0';
        cur.style.overflow='hidden';
      }
      cur = cur.previousElementSibling;
    }
    // wordmark (küçük) sabitle
    const panel = root.getElementById('zt-panel') || root;
    if (panel && !panel.querySelector('.zt-wordmark-fixed')) {
      const wm = document.createElement('div');
      wm.className='zt-wordmark-fixed';
      Object.assign(wm.style,{
        position:'absolute', top:'10px', left:'12px', width:'118px', height:'20px',
        backgroundImage:`url(${chrome.runtime.getURL('assets/ZTblackbckgrn.png')})`,
        backgroundRepeat:'no-repeat', backgroundPosition:'left center', backgroundSize:'contain',
        pointerEvents:'none', filter:'drop-shadow(0 2px 6px rgba(0,0,0,.25))'
      });
      panel.style.position='relative';
      const padTop=parseInt(getComputedStyle(panel).paddingTop||'0',10);
      if(padTop<40) panel.style.paddingTop='40px';
      panel.appendChild(wm);
    }
  }

  function forceCTA(root){
    const btns=[...root.querySelectorAll('button, [role="button"]')];
    const cta = btns.find(b => /(generate\s*handoff|handoff oluştur)/i.test(b.textContent||'') || /⚡/.test(b.innerHTML||''));
    if(!cta) return;

    // içerikleri gizle
    [...cta.children].forEach(ch=> ch.style.visibility='hidden');

    // inline stillerle lime'a zorla (sınıf ne olursa olsun)
    Object.assign(cta.style,{
      position:'relative', display:'flex', alignItems:'center', justifyContent:'center',
      width:'100%', minHeight:'46px', padding:'12px 16px 12px 52px',
      borderRadius:'16px', border:'1px solid rgba(255,255,255,.10)',
      background:'#c1ff72', color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px',
      boxShadow:'0 6px 20px rgba(193,255,114,.28)', overflow:'hidden'
    });

    // metin overlay
    let text = cta.querySelector('.zt-cta-text');
    if(!text){ text=document.createElement('span'); text.className='zt-cta-text'; cta.appendChild(text); }
    Object.assign(text.style,{
      position:'absolute', left:'50%', top:'50%', transform:'translate(-50%,-50%)',
      color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px', lineHeight:'1',
      pointerEvents:'none', visibility:'visible'
    });
    text.textContent='Generate Handoff';

    // ikon
    let icon = cta.querySelector('.zt-cta-icon');
    if(!icon){ icon=document.createElement('span'); icon.className='zt-cta-icon'; cta.appendChild(icon); }
    Object.assign(icon.style,{
      position:'absolute', left:'16px', top:'50%', transform:'translateY(-50%)',
      width:'18px', height:'18px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/zticontrans.png')})`,
      backgroundRepeat:'no-repeat', backgroundPosition:'center', backgroundSize:'contain',
      pointerEvents:'none', visibility:'visible'
    });

    // hover
    cta.onmouseenter=()=>{ cta.style.background='#a6ff3b'; cta.style.transform='translateY(-1px)'; };
    cta.onmouseleave=()=>{ cta.style.background='#c1ff72'; cta.style.transform='none'; };
  }

  function fixLogout(root){
    const lo = [...root.querySelectorAll('button, [role="button"]')].find(b=>/logout/i.test(b.textContent||''));
    if(!lo) return;
    Object.assign(lo.style,{
      background:'#1e1e1e', color:'#eaeef7',
      border:'1px solid rgba(255,255,255,.1)', borderRadius:'12px',
      padding:'8px 14px', fontWeight:'700'
    });
  }

  function run(){
    const root=sh(); if(!root) return;
    killHeroAndTidy(root);
    forceCTA(root);
    fixLogout(root);
  }

  run();
  const root0=sh();
  if(root0){
    const mo=new MutationObserver(()=>{ try{ run(); }catch{} });
    mo.observe(root0,{subtree:true, childList:true, attributes:true, attributeFilter:['style','class']});
  }
})();

// ===== ZeroToken: NUKE ABOVE PROGRESS + FORCE CTA (final) =====
(function(){
  const HOST='zt-host';
  function sh(){ return document.getElementById(HOST)?.shadowRoot || null; }

  // A) Progress bar'ın ÜSTÜNDEKİ TÜM ELEMANLARI kaldır
  function nukeAboveProgress(root){
    const pb = root.querySelector('[role="progressbar"]');
    if(!pb) return false;
    let cur = pb.previousElementSibling, changed=false;
    while(cur){
      const prev = cur.previousElementSibling;
      cur.remove();              // geri dönüş: sayfayı yenilemen yeter
      cur = prev;
      changed=true;
    }
    return changed;
  }

  // B) Küçük wordmark'ı panelin sol üstüne sabitle
  function pinWordmark(root){
    const panel = root.getElementById('zt-panel') || root;
    if(!panel || panel.querySelector('.zt-wordmark-fixed')) return;
    const wm = document.createElement('div');
    wm.className='zt-wordmark-fixed';
    Object.assign(wm.style,{
      position:'absolute', top:'10px', left:'12px', width:'118px', height:'20px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/ZTblackbckgrn.png')})`,
      backgroundRepeat:'no-repeat', backgroundPosition:'left center', backgroundSize:'contain',
      pointerEvents:'none', filter:'drop-shadow(0 2px 6px rgba(0,0,0,.25))'
    });
    panel.style.position='relative';
    const padTop=parseInt(getComputedStyle(panel).paddingTop||'0',10);
    if(padTop<40) panel.style.paddingTop='40px';
    panel.appendChild(wm);
  }

  // C) CTA'yı sınıf bağımsız lime'a zorla; Logout'u ayır
  function forceCTAandLogout(root){
    const btns=[...root.querySelectorAll('button, [role="button"]')];

    // CTA tespiti
    const cta = btns.find(b => /(generate\s*handoff|handoff oluştur)/i.test(b.textContent||'') || /⚡/.test(b.innerHTML||''));
    if (cta){
      [...cta.children].forEach(ch => ch.style.visibility='hidden');
      Object.assign(cta.style,{
        position:'relative', display:'flex', alignItems:'center', justifyContent:'center',
        width:'100%', minHeight:'46px', padding:'12px 16px 12px 52px',
        borderRadius:'16px', border:'1px solid rgba(255,255,255,.10)',
        background:'#c1ff72', color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px',
        boxShadow:'0 6px 20px rgba(193,255,114,.28)', overflow:'hidden'
      });
      let text = cta.querySelector('.zt-cta-text');
      if(!text){ text=document.createElement('span'); text.className='zt-cta-text'; cta.appendChild(text); }
      Object.assign(text.style,{position:'absolute',left:'50%',top:'50%',transform:'translate(-50%,-50%)',color:'#000',fontWeight:'800',fontSize:'16px',letterSpacing:'.2px',lineHeight:'1',pointerEvents:'none',visibility:'visible'});
      text.textContent='Generate Handoff';
      let icon = cta.querySelector('.zt-cta-icon');
      if(!icon){ icon=document.createElement('span'); icon.className='zt-cta-icon'; cta.appendChild(icon); }
      Object.assign(icon.style,{position:'absolute',left:'16px',top:'50%',transform:'translateY(-50%)',width:'18px',height:'18px',backgroundImage:`url(${chrome.runtime.getURL('assets/zticontrans.png')})`,backgroundRepeat:'no-repeat',backgroundPosition:'center',backgroundSize:'contain',pointerEvents:'none',visibility:'visible'});
      cta.onmouseenter=()=>{ cta.style.background='#a6ff3b'; cta.style.transform='translateY(-1px)'; };
      cta.onmouseleave=()=>{ cta.style.background='#c1ff72'; cta.style.transform='none'; };
    }

    // Logout
    const lo = btns.find(b => /logout/i.test(b.textContent||''));
    if (lo){
      Object.assign(lo.style,{
        background:'#1e1e1e', color:'#eaeef7',
        border:'1px solid rgba(255,255,255,.1)', borderRadius:'12px',
        padding:'8px 14px', fontWeight:'700'
      });
    }
  }

  function run(){
    const root = sh(); if(!root) return;
    const nuked = nukeAboveProgress(root);
    if (nuked) pinWordmark(root);
    forceCTAandLogout(root);
  }

  // Çok erken de çalışalım; sonra da reflow'larda tekrar uygula
  let tries = 0;
  const t = setInterval(()=>{ run(); if(++tries>25) clearInterval(t); }, 120);
  const r = sh();
  if(r){
    const mo = new MutationObserver(()=>{ try{ run(); }catch{} });
    mo.observe(r,{subtree:true, childList:true, attributes:true, attributeFilter:['style','class']});
  }
})();

// ==== ZeroToken: ULTRA SANITIZER (panel bg kill + CTA hard reset) ====
(function(){
  const HOST='zt-host';
  const HERO_RX = /(ZeroTokenTrans\.png|ZTblackbckgrn\.png)/i;

  const sh = () => document.getElementById(HOST)?.shadowRoot || null;

  function killPanelAndSiblingsBg(root){
    const panel = root.getElementById('zt-panel') || root;
    // 1) Panelin içindeki ve panelin KENDİ background'ını temizle
    const pcs = getComputedStyle(panel);
    if (HERO_RX.test(pcs.backgroundImage || '')) {
      panel.style.backgroundImage = 'none';
      panel.style.background = (panel.style.background || '').replace(/url\([^)]+\)/g,'none');
    }
    // 2) Progress'in ÜSTÜNDEN zaten nuke yaptık; ALTTAN da kontrol (bazı buildlerde altında geliyor)
    const pb = root.querySelector('[role="progressbar"]');
    if (pb){
      let node = pb.nextElementSibling;
      let guard = 0;
      while(node && guard++ < 5){
        const cs = getComputedStyle(node);
        if (HERO_RX.test(cs.backgroundImage||'')) {
          node.style.backgroundImage = 'none';
          node.style.background = (node.style.background || '').replace(/url\([^)]+\)/g,'none');
          node.style.minHeight='0'; node.style.height='0'; node.style.padding='0'; node.style.overflow='hidden';
        }
        node = node.nextElementSibling;
      }
    }
    // 3) Panelin üst-sol küçük wordmark
    if (!panel.querySelector('.zt-wordmark-fixed')) {
      const wm = document.createElement('div');
      wm.className = 'zt-wordmark-fixed';
      Object.assign(wm.style,{
        position:'absolute', top:'10px', left:'12px', width:'118px', height:'20px',
        backgroundImage:`url(${chrome.runtime.getURL('assets/ZTblackbckgrn.png')})`,
        backgroundRepeat:'no-repeat', backgroundPosition:'left center', backgroundSize:'contain',
        pointerEvents:'none', filter:'drop-shadow(0 2px 6px rgba(0,0,0,.25))'
      });
      panel.style.position='relative';
      const padTop = parseInt(getComputedStyle(panel).paddingTop||'0',10);
      if (padTop < 40) panel.style.paddingTop = '40px';
      panel.appendChild(wm);
    }
  }

  function forceCTAandLogout(root){
    const btns = [...root.querySelectorAll('button, [role="button"]')];

    // --- CTA: metin/emoji ile yakala ---
    const CTA_RX = /(generate\s*handoff|handoff oluştur)/i;
    const cta = btns.find(b => CTA_RX.test(b.textContent||'') || /⚡/.test(b.innerHTML||''));
    if (cta){
      // 1) İçeriği TAMAMEN sıfırla (metin node + svg + emoji her şey gitsin)
      cta.innerHTML = '';
      // 2) Stil – inline (override edilemez)
      Object.assign(cta.style,{
        position:'relative', display:'flex', alignItems:'center', justifyContent:'center',
        width:'100%', minHeight:'46px', padding:'12px 16px 12px 52px',
        borderRadius:'16px', border:'1px solid rgba(255,255,255,.10)',
        background:'#c1ff72', color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px',
        boxShadow:'0 6px 20px rgba(193,255,114,.28)', overflow:'hidden'
      });
      // 3) Bizim metin ve ikon
      const text = document.createElement('span');
      text.textContent = 'Generate Handoff';
      Object.assign(text.style,{
        position:'absolute', left:'50%', top:'50%', transform:'translate(-50%,-50%)',
        color:'#000', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px', lineHeight:'1',
        pointerEvents:'none'
      });
      const icon = document.createElement('span');
      Object.assign(icon.style,{
        position:'absolute', left:'16px', top:'50%', transform:'translateY(-50%)',
        width:'18px', height:'18px',
        backgroundImage:`url(${chrome.runtime.getURL('assets/zticontrans.png')})`,
        backgroundRepeat:'no-repeat', backgroundPosition:'center', backgroundSize:'contain',
        pointerEvents:'none'
      });
      cta.append(icon, text);
      cta.onmouseenter=()=>{ cta.style.background='#a6ff3b'; cta.style.transform='translateY(-1px)'; };
      cta.onmouseleave=()=>{ cta.style.background='#c1ff72'; cta.style.transform='none'; };
    }

    // --- Logout – ayrı tut ---
    const lo = btns.find(b => /logout/i.test(b.textContent||''));
    if (lo){
      Object.assign(lo.style,{
        background:'#1e1e1e', color:'#eaeef7',
        border:'1px solid rgba(255,255,255,.1)', borderRadius:'12px',
        padding:'8px 14px', fontWeight:'700'
      });
    }
  }

  function run(){
    const root = sh(); if(!root) return;
    killPanelAndSiblingsBg(root);
    forceCTAandLogout(root);
  }

  // İlk saniye boyunca birkaç kez dene; sonra değişimde tekrar uygula
  let tries=0; const t=setInterval(()=>{ run(); if(++tries>25) clearInterval(t); }, 120);
  const r = sh();
  if(r){
    const mo = new MutationObserver(()=>{ try{ run(); }catch{} });
    mo.observe(r,{subtree:true, childList:true, attributes:true, attributeFilter:['style','class']});
  }
})();

// === ZeroToken: post-render UI patch (safe; no template edits) ===
(function(){
  const HOST='zt-host';
  const sh = () => document.getElementById(HOST)?.shadowRoot || null;

  function apply(){
    const root = sh(); if(!root) return;

    // 1) Header wordmark'ı düzelt
    const img = root.querySelector('.zt-wordmark');
    if (img) {
      img.src = chrome.runtime.getURL('assets/ZTblackbckgrn.png');
      Object.assign(img.style, {
        width:'118px', height:'20px', objectFit:'contain', display:'block'
      });
    }

    // 2) CTA: lime + solda ikon + ortada metin
    const btn = root.querySelector('#zt-handoff-btn');
    if (btn) {
      // içeriği sıfırla (kaçış problemi yok)
      btn.innerHTML = '';
      Object.assign(btn.style, {
        position:'relative', width:'100%',
        background:'#c1ff72', color:'#000',
        border:'1px solid rgba(255,255,255,.1)', borderRadius:'16px',
        padding:'12px 16px 12px 52px',
        cursor:'pointer', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px',
        boxShadow:'0 6px 20px rgba(193,255,114,.28)'
      });
      const icon = document.createElement('span');
      Object.assign(icon.style, {
        position:'absolute', left:'16px', top:'50%', transform:'translateY(-50%)',
        width:'18px', height:'18px',
        backgroundImage:`url(${chrome.runtime.getURL('assets/zticontrans.png')})`,
        backgroundRepeat:'no-repeat', backgroundSize:'contain', backgroundPosition:'center',
        pointerEvents:'none'
      });
      const label = document.createElement('span');
      label.textContent = 'Generate Handoff';
      Object.assign(label.style, {
        position:'absolute', left:'50%', top:'50%', transform:'translate(-50%,-50%)',
        pointerEvents:'none', fontWeight:'800', fontSize:'16px', letterSpacing:'.2px', color:'#000'
      });
      btn.append(icon, label);
      btn.onmouseenter = ()=>{ btn.style.background='#a6ff3b'; btn.style.transform='translateY(-1px)'; };
      btn.onmouseleave = ()=>{ btn.style.background='#c1ff72'; btn.style.transform='none'; };
    }

    // 3) Footer (yoksa ekle)
    if (!root.querySelector('.zt-footer')) {
      const hint = root.querySelector('#zt-hint') || root.querySelector('#zt-panel');
      if (hint) {
        const f = document.createElement('div');
        f.className = 'zt-footer';
        Object.assign(f.style, { textAlign:'center', fontSize:'12px', opacity:'.8', marginTop:'8px' });

        const logo = document.createElement('span');
        Object.assign(logo.style, {
          display:'inline-block', width:'18px', height:'18px', verticalAlign:'middle',
          backgroundImage:`url(${chrome.runtime.getURL('assets/marsiriusjustlogo.png')})`,
          backgroundRepeat:'no-repeat', backgroundSize:'contain', marginRight:'6px'
        });

        const txt = document.createElement('span');
        txt.textContent = 'Created & Powered by Marsirius AI Labs';

        f.append(logo, txt);
        hint.insertAdjacentElement('afterend', f);
      }
    }
  }

  // İlk uygulama + reflow'larda tekrar
  apply();
  const r = sh();
  if (r) new MutationObserver(()=>{ try{ apply(); }catch{} })
           .observe(r, {subtree:true, childList:true});
})();

// === ZeroToken: generic hero cleaner (name-agnostic) ===
(function(){
  const HOST='zt-host';
  const sh = () => document.getElementById(HOST)?.shadowRoot || null;

  function killGenericHero(){
    const root = sh(); if(!root) return;
    const pb = root.querySelector('[role="progressbar"]'); if(!pb) return;

    // 1) Progress'ten ÖNCEKİ tüm elemanlarda url(...) background varsa ve yükseklik büyükse sıfırla
    let el = pb.previousElementSibling;
    while(el){
      const cs = getComputedStyle(el);
      const bg = cs.backgroundImage || '';
      const h  = parseFloat(cs.height) || 0;
      if (bg.includes('url(') || h > 120) {
        el.style.backgroundImage = 'none';
        el.style.background = (el.style.background || '').replace(/url\([^)]+\)/g,'none');
        el.querySelectorAll('img').forEach(n => n.remove());
        el.style.minHeight='0'; el.style.height='0'; el.style.padding='0';
        el.style.margin='0 0 8px 0'; el.style.overflow='hidden';
      }
      el = el.previousElementSibling;
    }

    // 2) Panel'in KENDİ background'ı url(...) ise onu da kaldır
    const panel = root.getElementById('zt-panel') || root;
    const pbg = getComputedStyle(panel).backgroundImage || '';
    if (pbg.includes('url(')) {
      panel.style.backgroundImage = 'none';
      panel.style.background = (panel.style.background || '').replace(/url\([^)]+\)/g,'none');
    }
  }

  // Birkaç kez erken dene + reflow'da uygula
  let tries=0; const t=setInterval(()=>{ killGenericHero(); if(++tries>25) clearInterval(t); }, 120);
  const r = sh();
  if (r) new MutationObserver(()=>{ try{ killGenericHero(); }catch{} })
          .observe(r, {subtree:true, childList:true, attributes:true, attributeFilter:['style','class']});
})();

// === ZeroToken: background sweep (name-agnostic, core-safe) ===
(function(){
  const HOST='zt-host';
  const sh = () => document.getElementById(HOST)?.shadowRoot || null;

  function sweepBigBackgrounds(){
    const root = sh(); if(!root) return;
    const panel = root.getElementById('zt-panel') || root;

    panel.querySelectorAll('*').forEach(el=>{
      // Koruma: rozet ve CTA'ya dokunma
      if (el.classList?.contains('zt-wordmark-fixed')) return;
      if (el.id === 'zt-handoff-btn') return;

      const cs = getComputedStyle(el);
      const hasUrl = /url\(/.test(cs.backgroundImage||'');
      const big    = (parseFloat(cs.height)||0) >= 80 || (parseFloat(cs.minHeight)||0) >= 80;

      if (hasUrl && big){
        el.style.setProperty('background-image','none','important');
        el.style.setProperty('background','none','important');
        // Bazı build’lerde img ile basılıyor; varsa iç img’yi de kaldır
        el.querySelectorAll('img').forEach(img=>{
          const w = parseFloat(getComputedStyle(img).width)||0;
          const h = parseFloat(getComputedStyle(img).height)||0;
          if (w>=160 || h>=80) img.remove();
        });
      }
    });
  }

  // İlk birkaç saniye tekrarlı uygula + reflow’da yeniden
  let n=0; const tick=setInterval(()=>{sweepBigBackgrounds(); if(++n>25) clearInterval(tick);},120);
  const r = sh();
  if (r) new MutationObserver(()=>{ try{sweepBigBackgrounds();}catch{} })
          .observe(r,{subtree:true,childList:true,attributes:true,attributeFilter:['style','class']});
})();

// === ZeroToken: FINAL brand sweep (name-agnostic, core-safe) ===
(function(){
  const HOST='zt-host';
  const SH = ()=>document.getElementById(HOST)?.shadowRoot||null;

  // Büyük arka planlı blokları ve büyük marka img'lerini temizler
  function sweep(){
    const root = SH(); if(!root) return;
    const panel = root.getElementById('zt-panel') || root;

    // 1) url(...) background + yüksek blok => sıfırla (isim bağımsız)
    panel.querySelectorAll('*').forEach(el=>{
      if (el.classList?.contains('zt-wordmark-fixed')) return;  // küçük rozet kalsın
      if (el.id === 'zt-handoff-btn') return;                    // CTA kalsın

      const cs = getComputedStyle(el);
      const hasUrl = /url\(/.test(cs.backgroundImage||'');
      const big    = (parseFloat(cs.height)||0) >= 80 || (parseFloat(cs.minHeight)||0) >= 80;

      if (hasUrl && big){
        el.style.setProperty('background-image','none','important');
        el.style.setProperty('background','none','important');
        el.style.setProperty('min-height','0','important');
        el.style.setProperty('height','0','important');
        el.style.setProperty('padding','0','important');
        el.style.setProperty('margin','0 0 8px 0','important');
        el.style.setProperty('overflow','hidden','important');
      }
    });

    // 2) Büyük marka IMG'leri kaldır (isim bağımsız)
    const IMG_RX = /(ZT.*\.png|ZeroToken.*\.png)/i;
    panel.querySelectorAll('img').forEach(img=>{
      const src=(img.getAttribute('src')||'').toLowerCase();
      const w = Math.max(img.naturalWidth||0, img.clientWidth||0);
      const h = Math.max(img.naturalHeight||0, img.clientHeight||0);
      if (IMG_RX.test(src) && (w>=160 || h>=80)) {
        img.remove();
      }
    });

    // 3) Panel kendi background'ında url(...) varsa temizle
    const pbg = getComputedStyle(panel).backgroundImage||'';
    if (/url\(/.test(pbg)){
      panel.style.setProperty('background-image','none','important');
      panel.style.setProperty('background','none','important');
    }
  }

  // İlk saniyelerde birkaç kez dene, sonra reflow'da tekrar uygula
  let n=0; const t=setInterval(()=>{sweep(); if(++n>25) clearInterval(t);}, 120);
  const r=SH();
  if (r) new MutationObserver(()=>{ try{sweep();}catch{} })
          .observe(r,{subtree:true,childList:true,attributes:true,attributeFilter:['style','class','src']});
})();

// === ZeroToken: add Marsirius footer (once) ===
(function(){
  const HOST='zt-host';
  const sh = ()=>document.getElementById(HOST)?.shadowRoot||null;

  function addFooter(){
    const root = sh(); if(!root) return;
    if (root.querySelector('.zt-footer')) return;

    // CTA veya hint'ten sonra yerleştir
    const anchor = root.querySelector('#zt-hint') || root.querySelector('#zt-panel');
    if (!anchor) return;

    const f = document.createElement('div');
    f.className='zt-footer';
    Object.assign(f.style,{textAlign:'center',fontSize:'12px',opacity:'.85',marginTop:'8px',color:'#eaeef7'});

    const logo=document.createElement('span');
    Object.assign(logo.style,{
      display:'inline-block',width:'18px',height:'18px',verticalAlign:'middle',
      backgroundImage:`url(${chrome.runtime.getURL('assets/marsiriusjustlogo.png')})`,
      backgroundRepeat:'no-repeat',backgroundSize:'contain',marginRight:'6px'
    });

    const txt=document.createElement('span');
    txt.textContent='Created & Powered by Marsirius AI Labs';

    f.append(logo,txt);
    anchor.insertAdjacentElement('afterend', f);
  }

  addFooter();
  const r=sh();
  if(r) new MutationObserver(()=>{ try{ addFooter(); }catch{} })
         .observe(r,{subtree:true,childList:true});
})();

// === ZeroToken: pin Marsirius footer UNDER "ZeroToken Pro active · unlimited handoffs" ===
(function(){
  const HOST='zt-host';
  const sh = ()=>document.getElementById(HOST)?.shadowRoot||null;

  function findProRow(root){
    // Alttaki satırı bul: "ZeroToken Pro active · unlimited handoffs"
    // Metin değişse bile "ZeroToken Pro active" parçasını yakala.
    const all = Array.from(root.querySelectorAll('#zt-panel, #zt-panel *'));
    return all.find(el=>{
      const t=(el.textContent||'').trim();
      return t.toLowerCase().includes('zerotoken pro active');
    }) || null;
  }

  function ensureFooter(){
    const root = sh(); if(!root) return;
    const anchor = findProRow(root);
    if(!anchor) return;

    // Zaten ekliysek dokunma
    if (anchor.nextElementSibling && anchor.nextElementSibling.classList?.contains('zt-footer-fixed')) return;

    const f = document.createElement('div');
    f.className = 'zt-footer-fixed';
    Object.assign(f.style,{
      display:'flex', alignItems:'center', justifyContent:'center',
      gap:'6px',
      marginTop:'8px',
      fontSize:'12px',
      color:'#eaeef7',
      opacity:'.88',
      textAlign:'center'
    });

    const logo = document.createElement('span');
    Object.assign(logo.style,{
      display:'inline-block',
      width:'18px', height:'18px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/marsiriusjustlogo.png')})`,
      backgroundRepeat:'no-repeat',
      backgroundSize:'contain',
      backgroundPosition:'center'
    });

    const txt = document.createElement('span');
    txt.textContent = 'Created & Powered by Marsirius AI Labs';

    f.append(logo, txt);

    // Metnin HEMEN ALTINA koy
    anchor.insertAdjacentElement('afterend', f);
  }

  // İlk çalıştır + reflow'larda tekrarla (başka dosya silse bile geri koyar)
  ensureFooter();
  const root0 = sh();
  if(root0){
    const mo = new MutationObserver(()=>{ try{ ensureFooter(); }catch{} });
    mo.observe(root0, {subtree:true, childList:true, characterData:true});
  }
})();

// === ZeroToken: bottom-pinned Marsirius footer (reflow-safe) ===
(function(){
  const HOST='zt-host';
  const sh = ()=>document.getElementById(HOST)?.shadowRoot||null;

  function ensureBottomFooter(){
    const root = sh(); if(!root) return;
    const panel = root.getElementById('zt-panel') || root;

    // Zaten varsa güncelle ve sona taşı
    let f = root.querySelector('.zt-footer-fixed');
    if (!f){
      f = document.createElement('div');
      f.className = 'zt-footer-fixed';
      panel.appendChild(f);
    } else if (f.parentElement !== panel || panel.lastElementChild !== f){
      panel.appendChild(f); // en sona al
    }

    Object.assign(f.style,{
      display:'flex', alignItems:'center', justifyContent:'center',
      gap:'6px', marginTop:'8px', marginBottom:'2px',
      fontSize:'12px', color:'#eaeef7', opacity:'.88', textAlign:'center'
    });

    // İçeriği her seferinde idempotent kur
    if (!f.querySelector('.zt-footer-logo')){
      const logo = document.createElement('span');
      logo.className='zt-footer-logo';
      f.prepend(logo);
    }
    const logo=f.querySelector('.zt-footer-logo');
    Object.assign(logo.style,{
      display:'inline-block', width:'18px', height:'18px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/marsiriusjustlogo.png')})`,
      backgroundRepeat:'no-repeat', backgroundSize:'contain', backgroundPosition:'center'
    });

    if (!f.querySelector('.zt-footer-text')){
      const txt=document.createElement('span');
      txt.className='zt-footer-text';
      f.append(txt);
    }
    f.querySelector('.zt-footer-text').textContent='Created & Powered by Marsirius AI Labs';
  }

  // İlk kurulum + reflow’da geri getir
  ensureBottomFooter();
  const r=sh();
  if(r){
    new MutationObserver(()=>{ try{ ensureBottomFooter(); }catch{} })
      .observe(r,{subtree:true,childList:true,characterData:true});
  }
})();

// === ZeroToken: absolute bottom footer (panel içine pin'li) ===
(function(){
  const HOST='zt-host';
  const sh = ()=>document.getElementById(HOST)?.shadowRoot||null;

  function ensureBottomFooterAbs(){
    const root = sh(); if(!root) return;
    const panel = root.getElementById('zt-panel'); if(!panel) return;

    // Panel alt kırpmayı önle
    const padB = parseInt(getComputedStyle(panel).paddingBottom||'0', 10);
    if (padB < 40) panel.style.paddingBottom = '40px';

    // Panel pozisyonlayalım (absolute için referans)
    if (getComputedStyle(panel).position === 'static') {
      panel.style.position = 'relative';
    }

    // Footer DIV'i oluştur/yeniden konumlandır
    let f = root.querySelector('.zt-footer-fixedabs');
    if (!f){
      f = document.createElement('div');
      f.className = 'zt-footer-fixedabs';
      panel.appendChild(f);
    }
    Object.assign(f.style, {
      position:'absolute',
      left:'50%',
      bottom:'8px',
      transform:'translateX(-50%)',
      display:'flex',
      alignItems:'center',
      justifyContent:'center',
      gap:'6px',
      fontSize:'12px',
      color:'#eaeef7',
      opacity:'.9',
      background:'transparent',
      pointerEvents:'none'   // tıklamaları engellemesin
    });

    // İçerik (ikon + metin) — idempotent
    if (!f.querySelector('.zt-footer-logo')){
      const logo = document.createElement('span');
      logo.className='zt-footer-logo';
      f.appendChild(logo);
    }
    const logo=f.querySelector('.zt-footer-logo');
    Object.assign(logo.style,{
      display:'inline-block', width:'18px', height:'18px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/marsiriusjustlogo.png')})`,
      backgroundRepeat:'no-repeat', backgroundSize:'contain', backgroundPosition:'center',
      marginRight:'6px'
    });

    if (!f.querySelector('.zt-footer-text')){
      const txt = document.createElement('span');
      txt.className='zt-footer-text';
      f.appendChild(txt);
    }
    f.querySelector('.zt-footer-text').textContent = 'Created & Powered by Marsirius AI Labs';
  }

  // İlk kurulum + reflow’da geri getir
  ensureBottomFooterAbs();
  const r = sh();
  if (r) new MutationObserver(()=>{ try{ ensureBottomFooterAbs(); }catch{} })
          .observe(r, {subtree:true, childList:true, attributes:true, characterData:true});
})();
// === ZeroToken: single-brand & single-footer enforcer (core-safe) ===
(function(){
  const HOST='zt-host';
  const sh = ()=>document.getElementById(HOST)?.shadowRoot||null;

  // Panel referansı + padding güvenliği
  function getPanel(){
    const root = sh(); if(!root) return null;
    const panel = root.getElementById('zt-panel') || root;
    if (getComputedStyle(panel).position === 'static') panel.style.position='relative';
    // footer için alt boşluk
    const pb = parseInt(getComputedStyle(panel).paddingBottom||'0',10);
    if (pb < 40) panel.style.paddingBottom = '40px';
    return panel;
  }

  // 1) ÜST LOGO — tek kopya
  function enforceSingleBrand(){
    const root = sh(); const panel = getPanel(); if(!root||!panel) return;

    // Tüm muhtemel markalama elemanlarını topla
    const candidates = [
      ...root.querySelectorAll('.zt-wordmark'),
      ...root.querySelectorAll('img.zt-wordmark'),
      ...root.querySelectorAll('img[src*="ZT"][src$=".png"]'),
      ...root.querySelectorAll('img[src*="ZeroToken"][src$=".png"]')
    ];

    // Hepsini kaldır
    candidates.forEach(el=> el.remove());

    // Sadece 1 adet oluştur (sol üst)
    let wm = root.querySelector('.zt-wordmark-fixed');
    if (!wm){
      wm = document.createElement('div');
      wm.className = 'zt-wordmark-fixed';
      panel.appendChild(wm);
    }
    Object.assign(wm.style,{
      position:'absolute', top:'10px', left:'12px',
      width:'118px', height:'20px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/ZTblackbckgrn.png')})`,
      backgroundRepeat:'no-repeat', backgroundPosition:'left center', backgroundSize:'contain',
      pointerEvents:'none', filter:'drop-shadow(0 2px 6px rgba(0,0,0,.25))'
    });
  }

  // 2) FOOTER — tek kopya (panelin en altına sabit)
  function enforceSingleFooter(){
    const root = sh(); const panel = getPanel(); if(!root||!panel) return;

    // Varsa tüm footer varyantlarını temizle (bizim önceki class’larımız dahil)
    [...root.querySelectorAll('.zt-footer, .zt-footer-fixed, .zt-footer-fixedabs')].forEach(el=> el.remove());

    // Tek footer yarat veya güncelle
    let f = root.querySelector('.zt-footer-final');
    if (!f){
      f = document.createElement('div');
      f.className='zt-footer-final';
      panel.appendChild(f);
    }
    Object.assign(f.style,{
      position:'absolute', left:'50%', bottom:'8px', transform:'translateX(-50%)',
      display:'flex', alignItems:'center', justifyContent:'center', gap:'6px',
      fontSize:'12px', color:'#eaeef7', opacity:'.9', pointerEvents:'none'
    });

    // içerik (idempotent)
    let logo = f.querySelector('.logo'); if(!logo){ logo=document.createElement('span'); logo.className='logo'; f.appendChild(logo); }
    Object.assign(logo.style,{
      display:'inline-block', width:'18px', height:'18px',
      backgroundImage:`url(${chrome.runtime.getURL('assets/marsiriusjustlogo.png')})`,
      backgroundRepeat:'no-repeat', backgroundSize:'contain', backgroundPosition:'center'
    });

    let txt = f.querySelector('.txt'); if(!txt){ txt=document.createElement('span'); txt.className='txt'; f.appendChild(txt); }
    txt.textContent = 'Created & Powered by Marsirius AI Labs';
  }

  function run(){ enforceSingleBrand(); enforceSingleFooter(); }

  // İlk çalıştır + reflow’da tekrar
  run();
  const r = sh();
  if (r){
    new MutationObserver(()=>{ try{ run(); }catch{} })
      .observe(r,{subtree:true, childList:true, attributes:true, attributeFilter:['style','class','src']});
  }
})();

// === ZeroToken: inject bundle.js into page context (not isolated) ===
(function(){
  const BUNDLE_ID = 'zt-bundle-js';
  function injectBundleOnce(){
    if (document.getElementById(BUNDLE_ID)) return Promise.resolve(true);
    return new Promise((resolve, reject)=>{
      try {
        const s = document.createElement('script');
        s.id = BUNDLE_ID;
        s.src = chrome.runtime.getURL('bundle.js');  // page context yüklenir
        s.onload = ()=> resolve(true);
        s.onerror = (e)=> reject(e);
        (document.documentElement || document.head || document.body).appendChild(s);
      } catch(e){ reject(e); }
    });
  }
  async function ensureCreateClient(timeoutMs=5000){
    const t0 = Date.now();
    while (typeof window.createSupabaseClient !== 'function'){
      if (Date.now() - t0 > timeoutMs) return false;
      await new Promise(r=>setTimeout(r,150));
    }
    return true;
  }
  (async ()=>{
    try{
      await injectBundleOnce();
      const ok = await ensureCreateClient(5000);
      if (!ok) console.warn('[ZeroToken] createSupabaseClient görünmedi (page ctx)!');
      else     console.info('[ZeroToken] createSupabaseClient page ctx ✓');
    }catch(e){
      console.warn('[ZeroToken] bundle inject error:', e);
    }
  })();
})();

// === ZeroToken: inject bundle.js into page context (not isolated) ===
(function(){
  const BUNDLE_ID='zt-bundle-js';
  function injectBundleOnce(){
    if (document.getElementById(BUNDLE_ID)) return Promise.resolve(true);
    return new Promise((resolve,reject)=>{
      try{
        const s=document.createElement('script');
        s.id=BUNDLE_ID;
        s.src=chrome.runtime.getURL('bundle.js');
        s.onload=()=>resolve(true);
        s.onerror=(e)=>reject(e);
        (document.documentElement||document.head||document.body).appendChild(s);
      }catch(e){reject(e);}
    });
  }
  async function waitCreateClient(ms=5000){
    const t0=Date.now();
    while(typeof window.createSupabaseClient!=='function'){
      if(Date.now()-t0>ms) return false;
      await new Promise(r=>setTimeout(r,150));
    }
    return true;
  }
  (async()=>{
    try{
      await injectBundleOnce();
      const ok=await waitCreateClient(5000);
      if(!ok) console.warn('[ZeroToken] createSupabaseClient görünmedi (page ctx)!');
      else    console.info('[ZeroToken] createSupabaseClient page ctx ✓');
    }catch(e){ console.warn('[ZeroToken] bundle inject error:',e); }
  })();
})();
